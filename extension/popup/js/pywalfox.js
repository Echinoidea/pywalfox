const DEFAULT_COLORSCHEME = {
    BACKGROUND: '#252525',
    FOREGROUND: '#ffffff',
    BACKGROUND_LIGHT: '#444444',
    ACCENT_PRIMARY: '#0284f7',
    ACCENT_SECONDARY: '#0284f7',
    TEXT: '#ffffff'
};

var currentExtensionColors = {};
var pywalColors = {};

// Get the colors that we want to apply to the Settings page
function getExtensionColorsFromTheme(theme) {
    return {
        background: theme.colors ? theme.colors.frame : DEFAULT_COLORSCHEME.BACKGROUND,
        foreground: theme.colors ? theme.colors.tab_selected : DEFAULT_COLORSCHEME.FOREGROUND,
        backgroundLight: theme.colors ? theme.colors.button_background_hover : DEFAULT_COLORSCHEME.BACKGROUND_LIGHT,
        accentPrimary: theme.colors ? theme.colors.tab_loading : DEFAULT_COLORSCHEME.ACCENT_PRIMARY,
        accentSecondary: theme.colors ? theme.colors.popup_highlight : DEFAULT_COLORSCHEME.ACCENT_SECONDARY,
        text: theme.colors ? theme.colors.toolbar_field_text : DEFAULT_COLORSCHEME.TEXT
    };
}

// Update the CSS-variables in the Settings page to dynamically change the theme
// off the page based on the current selected colors
function setExtensionTheme(extensionColors) {
    document.documentElement.style.setProperty('--background', extensionColors.background);
    document.documentElement.style.setProperty('--background-light', extensionColors.backgroundLight);
    document.documentElement.style.setProperty('--foreground', extensionColors.foreground);
    document.documentElement.style.setProperty('--accent-primary', extensionColors.accentPrimary);
    document.documentElement.style.setProperty('--accent-secondary', extensionColors.accentSecondary);
    document.documentElement.style.setProperty('--text-color', extensionColors.text);
}

// Gets a color generated by pywal
function getPywalColorById(id) {
    if (pywalColors !== undefined) {
        return pywalColors[id];
    }
}

async function sendMessageToTabs(data) {
    const tabs = await browser.tabs.query({});

    for (const tab of tabs) {
        browser.tabs.sendMessage(tab.id, data);
    }
}

function setCustomColor(colorKey, color, ddgReload = true) {
    browser.runtime.sendMessage({
        action: 'customColor',
        type: colorKey,
        value: color,
        ddgReload: ddgReload
    });
}

function setVersionLabel(element) {
    element.innerText = `v${browser.runtime.getManifest().version}`;
}

// Sets the theme of the extension to match the one in the browser
async function loadExtension() {
    const theme = await browser.theme.getCurrent();
    const colors = getExtensionColorsFromTheme(theme);
    const gettingPywalColors = await browser.storage.local.get('pywalColors');
    setExtensionTheme(colors);

    currentExtensionColors = colors;
    if (gettingPywalColors.hasOwnProperty('pywalColors')) {
        pywalColors = gettingPywalColors.pywalColors;
    } else {
        output('Could not read pywal colors from local storage. Try fetching the colors again')
    }

    return colors
}

function setupListeners(updateFunction) {
    // Watch for theme updates
    browser.theme.onUpdated.addListener(async ({ theme, windowId }) => {
        const sidebarWindow = await browser.windows.getCurrent();
        if (!windowId || windowId == sidebarWindow.id) {
            loadExtension().then(updateFunction);
        }
    });

    loadExtension().then(updateFunction);
}


