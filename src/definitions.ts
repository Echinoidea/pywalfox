/**
 * Implements an interface for the pywal colors fetched from the users computer by the native messaging host.
 *
 * @remarks
 * The colors that the native app sends out is just a list of colors, where
 * indexes 0-15 corresponds to the colors generated by pywal and 16-17 the
 * additional colors generated by the native app. All the colors are in the hex format.
 */

export interface IPywalColors extends Array<string> {
  [index: number]: string;
}

export interface IExtendedPywalColorBase {
  targetIndex: number;
  colorString?: string;
  colorIndex?: number;
  modifier?: number;
}

export interface IModifiedPywalColor extends IExtendedPywalColorBase {
}

export interface ICustomPywalColor extends IExtendedPywalColorBase {
}

export type IExtendedPywalColor = IModifiedPywalColor | ICustomPywalColor;
export type IExtendedPywalColors = IExtendedPywalColor[];

export type IPaletteHash = string;

export enum PaletteColors {
  Background = 'background',
  BackgroundLight = 'backgroundLight',
  BackgroundExtra = 'backgroundExtra',
  AccentPrimary = 'accentPrimary',
  AccentSecondary = 'accentSecondary',
  Text = 'text',
  TextFocus = 'textFocus',
}

export enum CSSTargets {
  UserChrome = 'userChrome',
  UserContent = 'userContent',
}

export enum ThemeModes {
  Dark = 'dark',
  Light = 'light',
  Auto = 'auto'
}

export interface IPalette {
  [PaletteColors.Background]: string;
  [PaletteColors.BackgroundLight]: string;
  [PaletteColors.BackgroundExtra]: string;
  [PaletteColors.AccentPrimary]: string;
  [PaletteColors.AccentSecondary]: string;
  [PaletteColors.Text]: string;
  [PaletteColors.TextFocus]: string;
}

/**
 * Implements the interface for a browser theme.
 *
 * @remarks
 * The structure of this interface is based on the Firefox Theming API:
 * https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/theme
 */
export interface IBrowserTheme {
  icons: string;
  icons_attention: string;
  frame: string;
  tab_text: string;
  tab_loading: string;
  tab_background_text: string;
  tab_selected: string;
  tab_line: string;
  tab_background_separator: string;
  toolbar: string;
  toolbar_field: string;
  toolbar_field_focus: string;
  toolbar_field_text: string;
  toolbar_field_text_focus: string;
  toolbar_field_border: string;
  toolbar_field_border_focus: string;
  toolbar_field_separator: string;
  toolbar_field_highlight: string;
  toolbar_field_highlight_text: string;
  toolbar_bottom_separator: string;
  toolbar_top_separator: string;
  toolbar_vertical_separator: string;
  ntp_background: string;
  ntp_text: string;
  popup: string;
  popup_border: string;
  popup_text: string;
  popup_highlight: string;
  popup_highlight_text: string;
  sidebar: string;
  sidebar_border: string;
  sidebar_text: string;
  sidebar_highlight: string;
  sidebar_highlight_text: string;
  bookmark_text: string;
  button_background_hover: string;
  button_background_active: string;
}

export type IExtensionTheme = string;

export interface IDuckDuckGoTheme {
  [key: string]: string;
}

export interface IColorscheme {
  hash: IPaletteHash;
  palette: IPalette;
  browser: IBrowserTheme;
  duckduckgo: IDuckDuckGoTheme;
  extension: IExtensionTheme;
}

// TODO: Set the available keys that can be used for template definitions
export interface IPaletteTemplate {
  [key: string]: number;
}

export interface IThemeTemplate {
  [key: string]: PaletteColors;
}

export interface IDuckDuckGoThemeTemplate {
  background: PaletteColors;
  headerBackground: PaletteColors;
  resultTitle: PaletteColors;
  resultDescription: PaletteColors;
  resultLink: PaletteColors;
  resultLinkVisited: PaletteColors;
  hover: PaletteColors;
  modifier: number;
}

export interface IColorschemeTemplate {
  palette: IPaletteTemplate;
  browser: IThemeTemplate;
  duckduckgo: IDuckDuckGoThemeTemplate;
}

export interface IColorschemeTemplates {
  [ThemeModes.Light]: IColorschemeTemplate;
  [ThemeModes.Dark]: IColorschemeTemplate;
}

export type TemplateTypes = IPaletteTemplate | IThemeTemplate | IDuckDuckGoThemeTemplate;
export type ColorschemeTypes = IPalette | IPaletteHash | IBrowserTheme | IDuckDuckGoTheme | IExtensionTheme;

export interface ICustomColors {
  [ThemeModes.Light]: Partial<IPalette>;
  [ThemeModes.Dark]: Partial<IPalette>;
}

export interface IExtensionOptions {
  [CSSTargets.UserChrome]: boolean;
  [CSSTargets.UserContent]: boolean;
  fontSize: number;
  duckduckgo: boolean;
  autoTimeStart: ITimeIntervalEndpoint;
  autoTimeEnd: ITimeIntervalEndpoint;
}

export interface IExtensionMessage {
  action: string;
  data?: any;
};

export interface IOptionSetData {
  option: string;
  enabled: boolean;
  value?: any;
}

/* Interface for the messages received from the native messaging host. */
export interface INativeAppMessage {
  action: string;
  success: boolean;
  error?: string;
  data?: any;
  [key: string]: any;
}

/* Interface for the messages sent to the native messaging host. */
export interface INativeAppRequest {
  action: string;
  target?: string;
  size?: number;
}

export interface INativeAppMessageCallbacks {
  connected: () => void,
  updateNeeded: () => void,
  disconnected: () => void,
  version: (version: string) => void,
  output: (message: string, error?: boolean) => void,
  colorscheme: (colorscheme: IPywalColors) => void,
  cssToggleSuccess: (target: string) => void,
  cssToggleFailed: (target: string, error: string) => void,
  cssFontSizeSetSuccess: (size: number) => void,
  cssFontSizeSetFailed: (error: string) => void,
}

/**
 * Use an attribute of an element as key with the actual HTMLElement node.
 */
export interface INodeLookup {
  [key: string]: HTMLElement;
}

export interface IInitialData {
  isApplied: boolean;
  pywalColors: IPywalColors;
  template: IColorschemeTemplate;
  customColors: Partial<IPalette>;
  themeMode: ThemeModes;
  templateThemeMode: ThemeModes;
  debuggingInfo: IDebuggingInfoData;
  options: IOptionSetData[];
  fontSize: number;
  autoTimeInterval: ITimeIntervalEndpoint[];
}

export interface IDebuggingInfoData {
  version: number;
  connected: boolean;
}

export interface INotificationData {
  title: string;
  message: string;
  error: boolean;
}

export interface IThemeModeSetData {
  mode: ThemeModes;
  updateSelected: boolean;
}

export interface IDuckDuckGoThemeSetData {
  hash: IPaletteHash;
  theme: IDuckDuckGoTheme;
}

export interface ITemplateItem {
  title: string;
  description: string;
  target: string;
}

export interface ITimeIntervalEndpoint {
  hour: number;
  minute: number;
  stringFormat: string;
}

/**
 * Expose 'wrappedJSObject' from the 'window' namespace.
 *
 * @remarks
 * The object is used by the DuckDuckGo content script to interface
 * with the DuckDuckGo scripts. It allows us to get and set settings
 * using the built-in functions.
 */
declare global {
  interface Window {
    wrappedJSObject: { DDG: any; };
  }
}
